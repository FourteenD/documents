import{d as n}from"./app.858485b8.js";const s={},a=n('<h2 id="配置格式" tabindex="-1"><a class="header-anchor" href="#配置格式" aria-hidden="true">#</a> 配置格式</h2><p>基本的 Nginx 文件由若干个部分组成，每个部分都是通过下列的方法定义的。</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>section<span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  <span class="token operator">&lt;</span>directive<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>parameters<span class="token operator">&gt;</span>；\n<span class="token punctuation">}</span>\n</code></pre></div><p>大括号实际上表示一个新上下文（context），需要注意的是，每一个指令行需要使用 <code>;</code> 来进行结束。</p><h2 id="nginx-conf" tabindex="-1"><a class="header-anchor" href="#nginx-conf" aria-hidden="true">#</a> nginx.conf</h2><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">cat</span> /etc/nginx/nginx.conf\n</code></pre></div><p>获取内容如下：</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token comment"># 配置 worker 进程的用户和组，默认是 nginx</span>\nuser  nginx<span class="token punctuation">;</span>\n<span class="token comment"># Nginx 进程，一般设置为和 CPU 核数一致，示例的阿里云学生机为 1 核</span>\nworker_processes  <span class="token number">1</span><span class="token punctuation">;</span>\n\n<span class="token comment"># 错误日志存放目录，指令的第二个参数表示被记录错误的级别</span>\n<span class="token comment"># 错误级别：debug、info、notice、warn、error 等</span>\nerror_log  /var/log/nginx/error.log warn<span class="token punctuation">;</span>\n<span class="token comment"># 设置记录主进程 ID 的文件</span>\npid        /var/run/nginx.pid<span class="token punctuation">;</span>\n\nevents <span class="token punctuation">{</span>\n\t\t<span class="token comment"># 单个进程最大并发数</span>\n    worker_connections  <span class="token number">1024</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment"># 主要配置文件</span>\nhttp <span class="token punctuation">{</span>\n\t\t<span class="token comment"># 文件扩展名与类型映射表</span>\n    include       /etc/nginx/mime.types<span class="token punctuation">;</span>\n    <span class="token comment"># 默认文件类型</span>\n    default_type  application/octet-stream<span class="token punctuation">;</span>\n\t\t<span class="token comment"># 设置日志格式：访问地址-访问用户-本地事件-请求</span>\n    log_format  main  <span class="token string">&#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span>\n                      <span class="token string">&#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span>\n                      <span class="token string">&#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;</span><span class="token punctuation">;</span>\n\n\t\t<span class="token comment"># 访问日志</span>\n    access_log  /var/log/nginx/access.log  main<span class="token punctuation">;</span>\n\n\t\t<span class="token comment"># 直接复制数据从一个文件到另一个文件描述符</span>\n    sendfile        on<span class="token punctuation">;</span>\n    <span class="token comment"># 仅依赖于 sendfile 的使用</span>\n    <span class="token comment"># 在一个数据包中尝试发送响应头，以及在数据包中发送一个完整的文件</span>\n    <span class="token comment">#tcp_nopush     on;</span>\n\n\t\t<span class="token comment"># 保持连接的时间（超时时间）</span>\n    keepalive_timeout  <span class="token number">65</span><span class="token punctuation">;</span>\n\t\t\n\t\t<span class="token comment"># 开启 gzip 压缩</span>\n    <span class="token comment">#gzip  on;</span>\n\n\t\t<span class="token comment"># 当前文件为 Nginx 主配置文件（入口），控制子配置项位置和文件</span>\n    include /etc/nginx/conf.d/*.conf<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="default-conf" tabindex="-1"><a class="header-anchor" href="#default-conf" aria-hidden="true">#</a> default.conf</h2><p>在主配置文件（nginx.conf）中可以看到子配置项所在的目录：</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token comment"># include /etc/nginx/conf.d/*.conf;</span>\n<span class="token comment"># 查看该目录下的文件：</span>\n<span class="token function">ls</span> /etc/nginx/conf.d/\n<span class="token comment"># default.conf # 默认</span>\n</code></pre></div><h3 id="_1-解析" tabindex="-1"><a class="header-anchor" href="#_1-解析" aria-hidden="true">#</a> 1. 解析</h3><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">cat</span> /etc/nginx/conf.d/default.conf\n</code></pre></div><p>获取内容如下：</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token comment"># 任何由关键字 server 的部分都被称为 “虚拟服务器”</span>\n<span class="token comment"># 一个虚拟服务器由 listen 和 server_name 指令组合定义</span>\nserver <span class="token punctuation">{</span>\n\t\t<span class="token comment"># 监听端口</span>\n    listen       <span class="token number">80</span><span class="token punctuation">;</span>\n    <span class="token comment"># 监听域名</span>\n    server_name  localhost<span class="token punctuation">;</span>\n\n    <span class="token comment">#charset koi8-r;</span>\n    <span class="token comment">#access_log  /var/log/nginx/host.access.log  main;</span>\n\n\t\t<span class="token comment"># location 指令可以用在虚拟服务器 server 部分，并且意味着来自客户端的 URI 或者内部重定向访问</span>\n\t\t<span class="token comment"># location 定义： location [modifier] uri {...}</span>\n    location / <span class="token punctuation">{</span>\n    \t\t<span class="token comment"># 服务默认启动目录</span>\n        root   /usr/share/nginx/html<span class="token punctuation">;</span>\n        <span class="token comment"># 默认文件格式</span>\n        index  index.html index.htm<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">#error_page  404              /404.html;</span>\n\n    <span class="token comment"># redirect server error pages to the static page /50x.html</span>\n    <span class="token comment">#</span>\n    <span class="token comment"># 错误状态码对应的页面</span>\n    error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html<span class="token punctuation">;</span>\n    <span class="token comment"># 对应页面的路径</span>\n    location <span class="token operator">=</span> /50x.html <span class="token punctuation">{</span>\n        root   /usr/share/nginx/html<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span>\n    <span class="token comment">#</span>\n    <span class="token comment">#location ~ \\.php$ {</span>\n    <span class="token comment">#    proxy_pass   http://127.0.0.1;</span>\n    <span class="token comment">#}</span>\n\n    <span class="token comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span>\n    <span class="token comment">#</span>\n    <span class="token comment">#location ~ \\.php$ {</span>\n    <span class="token comment">#    root           html;</span>\n    <span class="token comment">#    fastcgi_pass   127.0.0.1:9000;</span>\n    <span class="token comment">#    fastcgi_index  index.php;</span>\n    <span class="token comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span>\n    <span class="token comment">#    include        fastcgi_params;</span>\n    <span class="token comment">#}</span>\n\n    <span class="token comment"># deny access to .htaccess files, if Apache&#39;s document root</span>\n    <span class="token comment"># concurs with nginx&#39;s one</span>\n    <span class="token comment">#</span>\n    <span class="token comment">#location ~ /\\.ht {</span>\n    <span class="token comment">#    deny  all;</span>\n    <span class="token comment">#}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',15);s.render=function(n,s){return a};export default s;

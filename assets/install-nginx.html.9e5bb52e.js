import{r as n,o as a,c as s,a as e,F as o,d as t,b as p}from"./app.974cb5f8.js";const i={},c=t('<h2 id="检测源" tabindex="-1"><a class="header-anchor" href="#检测源" aria-hidden="true">#</a> 检测源</h2><p>首先需要检查当前源是否有 Nginx（CentOS示例），当没有的时候需要自己添加源。</p><div class="language-bash ext-sh"><pre class="language-bash"><code>yum list <span class="token operator">|</span> <span class="token function">grep</span> nginx\n<span class="token comment"># nginx.x86_64                             1:1.12.2-2.el7                  epel   </span>\n<span class="token comment"># nginx-all-modules.noarch                 1:1.12.2-2.el7                  epel   </span>\n<span class="token comment"># nginx-filesystem.noarch                  1:1.12.2-2.el7    </span>\n</code></pre></div><h2 id="更新-yum-源并安装" tabindex="-1"><a class="header-anchor" href="#更新-yum-源并安装" aria-hidden="true">#</a> 更新 yum 源并安装</h2>',4),l={href:"http://nginx.org/en/download.html",target:"_blank",rel:"noopener noreferrer"},r=p("官网"),m=p(" 可见 Nginx 稳定版本已经是 "),h=e("code",null,"1.16.1",-1),u=p(" ，所以需要"),g={href:"http://nginx.org/en/linux_packages.html",target:"_blank",rel:"noopener noreferrer"},d=p("修改"),x=p(" yum 源。"),f=t('<p>更新 Nginx 的源在 <a href="/os/centos/install-the-latest-version-of-nginx">CentOS</a>、<a href="/os/ubuntu/install-the-latest-version-of-nginx">Ubuntu</a> 中稍有不同，需要区别安装。</p><h2 id="编译安装" tabindex="-1"><a class="header-anchor" href="#编译安装" aria-hidden="true">#</a> 编译安装</h2><p>当需要添加一些第三方模块时就可以使用该形式。</p><h3 id="_1-环境" tabindex="-1"><a class="header-anchor" href="#_1-环境" aria-hidden="true">#</a> 1. 环境</h3><p>虚拟机：CentOS 7.6</p><h3 id="_2-下载" tabindex="-1"><a class="header-anchor" href="#_2-下载" aria-hidden="true">#</a> 2. 下载</h3>',6),k=p("进入"),b={href:"http://nginx.org/en/download.html",target:"_blank",rel:"noopener noreferrer"},y=p("官网"),q=p("获取对应的版本下载链接。"),v=t('<div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">wget</span> http://nginx.org/download/nginx-1.16.1.tar.gz\n\n<span class="token function">tar</span> -zxvf nginx-1.16.1.tar.gz <span class="token comment"># 解压</span>\nll nginx-1.16.1 <span class="token comment"># 验证</span>\n<span class="token function">cp</span> -r nginx-1.16.1/contrib/vim/* ~/.vim <span class="token comment"># 拷贝 vim 配置</span>\n<span class="token function">vim</span> nginx-1.16.1/conf/nginx.conf <span class="token comment"># 验证</span>\n</code></pre></div><h3 id="_3-配置" tabindex="-1"><a class="header-anchor" href="#_3-配置" aria-hidden="true">#</a> 3. 配置</h3><div class="language-bash ext-sh"><pre class="language-bash"><code>./configure --help <span class="token operator">|</span> <span class="token function">less</span> <span class="token comment"># 查看帮助</span>\n./configure --prefix<span class="token operator">=</span>/home/shanyuhai/nginx <span class="token comment"># 指定目录</span>\n\n<span class="token comment"># 可能会缺乏依赖（解决方案）</span>\nyum <span class="token function">install</span> -y httpd-devel pcre perl pcre-devel zlib zlib-devel GeoIP GeoIP-devel <span class="token comment"># 重新执行，当然也可以先使用 yum 安装自动获取一遍依赖（暂不清楚是否会导致负面影响）</span>\n\n<span class="token comment"># 结果如下</span>\n<span class="token comment"># creating objs/Makefile # 新增目录</span>\n\n<span class="token comment"># nginx path prefix: &quot;/home/shanyuhai/nginx&quot;</span>\n<span class="token comment"># nginx binary file: &quot;/home/shanyuhai/nginx/sbin/nginx&quot;</span>\n<span class="token comment"># nginx modules path: &quot;/home/shanyuhai/nginx/modules&quot;</span>\n<span class="token comment"># nginx configuration prefix: &quot;/home/shanyuhai/nginx/conf&quot;</span>\n<span class="token comment"># nginx configuration file: &quot;/home/shanyuhai/nginx/conf/nginx.conf&quot;</span>\n<span class="token comment"># nginx pid file: &quot;/home/shanyuhai/nginx/logs/nginx.pid&quot;</span>\n<span class="token comment"># nginx error log file: &quot;/home/shanyuhai/nginx/logs/error.log&quot;</span>\n<span class="token comment"># nginx http access log file: &quot;/home/shanyuhai/nginx/logs/access.log&quot;</span>\n<span class="token comment"># nginx http client request body temporary files: &quot;client_body_temp&quot;</span>\n<span class="token comment"># nginx http proxy temporary files: &quot;proxy_temp&quot;</span>\n<span class="token comment"># nginx http fastcgi temporary files: &quot;fastcgi_temp&quot;</span>\n<span class="token comment"># nginx http uwsgi temporary files: &quot;uwsgi_temp&quot;</span>\n<span class="token comment"># nginx http scgi temporary files: &quot;scgi_temp&quot;</span>\n\nll objs <span class="token comment"># 查看稍后 make 的内容</span>\n<span class="token function">make</span> <span class="token comment"># 编译</span>\nll objs <span class="token comment"># 验证</span>\n<span class="token function">make</span> <span class="token function">install</span> <span class="token comment"># 安装</span>\n\n/home/shanyuhai/nginx/sbin/nginx -V <span class="token comment"># 验证</span>\n</code></pre></div>',3);i.render=function(t,p){const i=n("OutboundLink");return a(),s(o,null,[c,e("p",null,[e("a",l,[r,e(i)]),m,h,u,e("a",g,[d,e(i)]),x]),f,e("p",null,[k,e("a",b,[y,e(i)]),q]),v],64)};export default i;

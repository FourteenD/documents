import{r as n,o as s,c as a,a as e,F as t,b as p,d as o}from"./app.b22342ed.js";const c={},l=e("h2",{id:"概念",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#概念","aria-hidden":"true"},"#"),p(" 概念")],-1),i=e("p",null,[e("code",null,"type"),p("，全称是 "),e("code",null,"Type Aliases"),p("，即 “类型别名”，注意它是别名而不是真正的类型。")],-1),r={href:"https://www.typescriptlang.org/docs/handbook/interfaces.html",target:"_blank",rel:"noopener noreferrer"},k=p("interface"),u=p(" 从官网看来可以描述：对象、函数、数组、Class。"),d=o('<h2 id="交集" tabindex="-1"><a class="header-anchor" href="#交集" aria-hidden="true">#</a> 交集</h2><p>测试过程中 <code>interface</code> 的错误提示更友善。</p><h3 id="_1-interface-extends-interface" tabindex="-1"><a class="header-anchor" href="#_1-interface-extends-interface" aria-hidden="true">#</a> 1. interface extends interface</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>\n  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="_2-type-type" tabindex="-1"><a class="header-anchor" href="#_2-type-type" aria-hidden="true">#</a> 2. type &amp; type</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token keyword">type</span> <span class="token class-name">Animal</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">Dog</span> <span class="token operator">=</span> Animal <span class="token operator">&amp;</span> <span class="token punctuation">{</span>\n  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="_3-interface-extends-type" tabindex="-1"><a class="header-anchor" href="#_3-interface-extends-type" aria-hidden="true">#</a> 3. interface extends type</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token keyword">type</span> <span class="token class-name">Animal</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>\n  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="_4-type-interface" tabindex="-1"><a class="header-anchor" href="#_4-type-interface" aria-hidden="true">#</a> 4. type &amp; interface</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">Dog</span> <span class="token operator">=</span> Animal <span class="token operator">&amp;</span> <span class="token punctuation">{</span>\n  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="区别" tabindex="-1"><a class="header-anchor" href="#区别" aria-hidden="true">#</a> 区别</h2><h3 id="_1-tuple" tabindex="-1"><a class="header-anchor" href="#_1-tuple" aria-hidden="true">#</a> 1. Tuple</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token keyword">type</span> <span class="token class-name">Tuple</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span>\n<span class="token keyword">interface</span> <span class="token class-name">ITuple</span> <span class="token punctuation">{</span>\n  <span class="token number">0</span><span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token number">1</span><span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span> <span class="token keyword">as</span> Tuple <span class="token comment">// ERROR</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span> <span class="token keyword">as</span> ITuple <span class="token comment">// OK</span>\n</code></pre></div><h3 id="_2-合并" tabindex="-1"><a class="header-anchor" href="#_2-合并" aria-hidden="true">#</a> 2. 合并</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token keyword">type</span> <span class="token class-name">Once</span> <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">Once</span> <span class="token operator">=</span> <span class="token punctuation">{</span> b<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>\n<span class="token comment">// Duplicate identifier &#39;Once&#39;.</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">IOnce</span> <span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">IOnce</span> <span class="token punctuation">{</span>\n  b<span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 合并为</span>\n<span class="token comment">// interface IOnce {</span>\n<span class="token comment">//   a: string</span>\n<span class="token comment">//   b: string</span>\n<span class="token comment">// }</span>\n</code></pre></div><h3 id="_3-工具类型" tabindex="-1"><a class="header-anchor" href="#_3-工具类型" aria-hidden="true">#</a> 3. 工具类型</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token keyword">type</span> <span class="token class-name">Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',17);c.render=function(p,o){const c=n("OutboundLink");return s(),a(t,null,[l,i,e("p",null,[e("a",r,[k,e(c)]),u]),d],64)};export default c;

import{r as n,o as s,c as a,a as e,F as p,d as o,b as c}from"./app.1cd85859.js";const t={},r=o('<h2 id="npm-run" tabindex="-1"><a class="header-anchor" href="#npm-run" aria-hidden="true">#</a> npm run</h2><p>常见的命令行传参是这样：</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token comment"># POSIX 风格</span>\n<span class="token function">npm</span> -h\n<span class="token comment"># GNU 风格</span>\n<span class="token function">npm</span> --help\n<span class="token comment"># 或许你还见过 Java 风格的，那简直是异教徒！</span>\n</code></pre></div>',3),l=c("很明显这个参数都是传递给 "),u=e("code",null,"npm",-1),d=c(" 的，而在使用 "),i=e("code",null,"npm run",-1),m=c(" 时我们实际希望使用的时 "),h=e("code",null,"package.json",-1),g=c(" 中 "),k=e("code",null,"scripts",-1),b=c(" 的命令，为了让参数传递到下层，那么自然需要一些"),f={href:"https://docs.npmjs.com/cli/v6/commands/npm-run-script#description",target:"_blank",rel:"noopener noreferrer"},v=c("手段"),x=c("："),j=o('<div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">npm</span> run <span class="token builtin class-name">test</span> -- --grep<span class="token operator">=</span><span class="token string">&quot;pattern&quot;</span>\n</code></pre></div><p>在正常的传参前增加 <code>--</code> 即可达成。</p>',2);t.render=function(o,c){const t=n("OutboundLink");return s(),a(p,null,[r,e("p",null,[l,u,d,i,m,h,g,k,b,e("a",f,[v,e(t)]),x]),j],64)};export default t;

import{r as n,o as s,c as a,a as t,F as p,b as e,d as o}from"./app.221f0787.js";const c={},l=t("h2",{id:"前置条件",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#前置条件","aria-hidden":"true"},"#"),e(" 前置条件")],-1),r={href:"https://www.typescriptlang.org/docs/handbook/generics.html",target:"_blank",rel:"noopener noreferrer"},k=e("泛型"),i=e("是一切工具类型的基础，可以当作函数中的入参，而想要进一步则还需要借助 "),u={href:"https://www.typescriptlang.org/docs/handbook/2/types-from-types.html",target:"_blank",rel:"noopener noreferrer"},d=e("Type Manipulation"),y=e("。"),g=o('<h3 id="_1-keyof-type-operator" tabindex="-1"><a class="header-anchor" href="#_1-keyof-type-operator" aria-hidden="true">#</a> 1. Keyof Type Operator</h3><p><code>keyof</code> 可用来获取 “对象类型” 的 <code>key</code>，并组成 <code>union</code>。</p><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token keyword">type</span> <span class="token class-name">Point</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  x<span class="token operator">:</span> <span class="token builtin">number</span>\n  y<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">P</span></span> <span class="token operator">=</span> <span class="token keyword">keyof</span> Point\n<span class="token comment">// type P = &quot;x&quot; | &quot;y&quot;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Mapish</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>k<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">M</span></span> <span class="token operator">=</span> <span class="token keyword">keyof</span> Mapish\n<span class="token comment">// type M = string | number</span>\n</code></pre></div><h3 id="_2-typeof-type-operator" tabindex="-1"><a class="header-anchor" href="#_2-typeof-type-operator" aria-hidden="true">#</a> 2. Typeof Type Operator</h3><p>在 JavaScript 的 “expression context” 中 <code>typeof</code> 可以返回对应的类型，而在 TypeScript 的 “type context” 中 <code>typeof</code> 同样可以返回对应的类型。</p><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">N</span></span> <span class="token operator">=</span> <span class="token keyword">typeof</span> s\n<span class="token comment">// type N = string</span>\n\n<span class="token keyword">function</span> <span class="token function">f</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">F</span></span> <span class="token operator">=</span> <span class="token keyword">typeof</span> f\n<span class="token comment">// type F = () =&gt; {x: number; y: number;}</span>\n</code></pre></div><h3 id="_3-indexed-access-types" tabindex="-1"><a class="header-anchor" href="#_3-indexed-access-types" aria-hidden="true">#</a> 3. Indexed Access Types</h3><p>索引类型为 type 增加类似于 JavaScript 对象数组的索引。</p><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token comment">// 对象</span>\n<span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  age<span class="token operator">:</span> <span class="token builtin">number</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span>\n  alive<span class="token operator">:</span> <span class="token builtin">boolean</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">I1</span></span> <span class="token operator">=</span> Person<span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// type I1 = string | number</span>\n\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">I2</span></span> <span class="token operator">=</span> Person<span class="token punctuation">[</span><span class="token keyword">keyof</span> Person<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// type I2 = string | number | boolean</span>\n\n<span class="token keyword">type</span> <span class="token class-name">AliveOrName</span> <span class="token operator">=</span> <span class="token string">&#39;alive&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">I3</span></span> <span class="token operator">=</span> Person<span class="token punctuation">[</span>AliveOrName<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// type I3 = string | boolean</span>\n\n<span class="token comment">// 数组</span>\n<span class="token keyword">const</span> MyArray <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">15</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">23</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Eve&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">38</span> <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> MyArray<span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// type Person = {</span>\n<span class="token comment">//   name: string;</span>\n<span class="token comment">//   age: number;</span>\n<span class="token comment">// }</span>\n</code></pre></div><h3 id="_4-conditional-types" tabindex="-1"><a class="header-anchor" href="#_4-conditional-types" aria-hidden="true">#</a> 4. Conditional Types</h3><p>基本与 JavaScript 的三元运算符一致。</p><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token keyword">type</span> <span class="token class-name">MessageOf<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Email</span> <span class="token punctuation">{</span>\n  message<span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>\n  <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">EmailMessageContents</span> <span class="token operator">=</span> MessageOf<span class="token operator">&lt;</span>Email<span class="token operator">&gt;</span>\n<span class="token comment">// type EmailMessageContents = string</span>\n\n<span class="token keyword">type</span> <span class="token class-name">DogMessageContents</span> <span class="token operator">=</span> MessageOf<span class="token operator">&lt;</span>Dog<span class="token operator">&gt;</span>\n<span class="token comment">// type DogMessageContents = never</span>\n</code></pre></div><h3 id="_5-mapped-types" tabindex="-1"><a class="header-anchor" href="#_5-mapped-types" aria-hidden="true">#</a> 5. Mapped Types</h3><p>映射类型配合上泛型，就造就了工具类型的基石。</p><p>其中修饰符可以改变原有约束，<code>-</code> 用于取消，<code>+</code> 则相反且为默认值：</p><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token keyword">type</span> <span class="token class-name">CreateMutable<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token operator">-</span><span class="token keyword">readonly</span> <span class="token punctuation">[</span>Property <span class="token keyword">in</span> <span class="token keyword">keyof</span> Type<span class="token punctuation">]</span><span class="token operator">:</span> Type<span class="token punctuation">[</span>Property<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">LockedAccount</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">readonly</span> id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token keyword">readonly</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">UnlockedAccount</span> <span class="token operator">=</span> CreateMutable<span class="token operator">&lt;</span>LockedAccount<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token comment">// type UnlockedAccount = {</span>\n<span class="token comment">//   id: string;</span>\n<span class="token comment">//   name: string;</span>\n<span class="token comment">// }</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Concrete<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>Property <span class="token keyword">in</span> <span class="token keyword">keyof</span> Type<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span> Type<span class="token punctuation">[</span>Property<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">MaybeUser</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">User</span> <span class="token operator">=</span> Concrete<span class="token operator">&lt;</span>MaybeUser<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token comment">// type User = {</span>\n<span class="token comment">//   id: string;</span>\n<span class="token comment">//   name: string;</span>\n<span class="token comment">//   age: number;</span>\n<span class="token comment">// }</span>\n</code></pre></div><p>对属性进行操作，编辑和移除：</p><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token keyword">type</span> <span class="token class-name">Getters<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>Property <span class="token keyword">in</span> <span class="token keyword">keyof</span> Type <span class="token keyword">as</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">get</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Capitalize<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">&amp;</span> Property<span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Type<span class="token punctuation">[</span>Property<span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  location<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">LazyPerson</span> <span class="token operator">=</span> Getters<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token comment">// type LazyPerson = {</span>\n<span class="token comment">//   getName: () =&gt; string;</span>\n<span class="token comment">//   getAge: () =&gt; number;</span>\n<span class="token comment">//   getLocation: () =&gt; string;</span>\n<span class="token comment">// }</span>\n\n<span class="token keyword">type</span> <span class="token class-name">RemoveKindField<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> Exclude<span class="token operator">&lt;</span><span class="token constant">K</span><span class="token punctuation">,</span> <span class="token string">&#39;kind&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>\n  kind<span class="token operator">:</span> <span class="token string">&#39;circle&#39;</span><span class="token punctuation">;</span>\n  radius<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">KindlessCircle</span> <span class="token operator">=</span> RemoveKindField<span class="token operator">&lt;</span>Circle<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token comment">// type KindlessCircle = {</span>\n<span class="token comment">//   radius: number;</span>\n<span class="token comment">// }</span>\n</code></pre></div><h3 id="_6-template-literal-types" tabindex="-1"><a class="header-anchor" href="#_6-template-literal-types" aria-hidden="true">#</a> 6. Template Literal Types</h3><p>很好，就差支持正则了。</p><h3 id="_7-extends-in" tabindex="-1"><a class="header-anchor" href="#_7-extends-in" aria-hidden="true">#</a> 7. extends &amp; in</h3>',21),m=t("code",null,"extends",-1),h=e(" 和 "),x=t("code",null,"in",-1),f=e(" 都可以作为约束行为，实际使用中是让人"),b={href:"https://stackoverflow.com/questions/57337598/in-typescript-what-do-extends-keyof-and-in-keyof-mean",target:"_blank",rel:"noopener noreferrer"},T=e("疑惑的"),w=e("，其中一条评论不知是否正确：“extends 总是用在泛型上，in 总是用在索引上”。"),v=o('<p>在泛型上提前做约束可以解决一些问题：</p><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">prop</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span></span> <span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">prop2</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span> <span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;shanyuhai&#39;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">18</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> u1 <span class="token operator">=</span> <span class="token function">prop</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span> <span class="token comment">// u1: string</span>\n<span class="token keyword">let</span> u2 <span class="token operator">=</span> <span class="token function">prop2</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span> <span class="token comment">// u2: string | number</span>\n</code></pre></div><p>其中的缘由很简单，根据参数来看，<code>u1</code> 返回类型是 <code>T[K]</code>，而 <code>u2</code> 返回类型是 <code>T[keyof T]</code>。</p><h3 id="_8-infer" tabindex="-1"><a class="header-anchor" href="#_8-infer" aria-hidden="true">#</a> 8. infer</h3><p><code>infer</code> 在 <code>extends</code> 条件语句中表示将要推断的类型。</p><h2 id="partial-type" tabindex="-1"><a class="header-anchor" href="#partial-type" aria-hidden="true">#</a> <code>Partial&lt;Type&gt;</code></h2><h3 id="define" tabindex="-1"><a class="header-anchor" href="#define" aria-hidden="true">#</a> Define</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token comment">/**\n * 将 T 中的所有的属性都变为可选\n */</span>\n<span class="token keyword">type</span> <span class="token class-name">Partial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token builtin">string</span>\n  description<span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">updateTodo</span> <span class="token punctuation">(</span><span class="token parameter">todo<span class="token operator">:</span> Todo<span class="token punctuation">,</span> fieldsToUpdate<span class="token operator">:</span> Partial<span class="token operator">&lt;</span>Todo<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>todo<span class="token punctuation">,</span> <span class="token operator">...</span>fieldsToUpdate <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> todo1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token string">&#39;organize desk&#39;</span><span class="token punctuation">,</span>\n  description<span class="token operator">:</span> <span class="token string">&#39;clear clutter&#39;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> todo2 <span class="token operator">=</span> <span class="token function">updateTodo</span><span class="token punctuation">(</span>todo1<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  description<span class="token operator">:</span> <span class="token string">&#39;throw out trash&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="readonly-type" tabindex="-1"><a class="header-anchor" href="#readonly-type" aria-hidden="true">#</a> <code>Readonly&lt;Type&gt;</code></h2><h3 id="define-1" tabindex="-1"><a class="header-anchor" href="#define-1" aria-hidden="true">#</a> Define</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token comment">/**\n * 将 T 中的所有属性变为只读属性\n */</span>\n<span class="token keyword">type</span> <span class="token class-name">Readonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1" aria-hidden="true">#</a> Example</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> todo<span class="token operator">:</span> MyReadonly<span class="token operator">&lt;</span>Todo<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token string">&#39;Delete inactive users&#39;</span>\n<span class="token punctuation">}</span>\n\ntodo<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span> <span class="token comment">// ERROR</span>\n<span class="token comment">// Cannot assign to &#39;title&#39; because it is a read-only property.</span>\n</code></pre></div><h2 id="record-keys-type" tabindex="-1"><a class="header-anchor" href="#record-keys-type" aria-hidden="true">#</a> <code>Record&lt;Keys,Type&gt;</code></h2><h3 id="define-2" tabindex="-1"><a class="header-anchor" href="#define-2" aria-hidden="true">#</a> Define</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token comment">/**\n * 将 K 中所有的属性的值转为 T 类型\n */</span>\n<span class="token keyword">type</span> <span class="token class-name">Record<span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="example-2" tabindex="-1"><a class="header-anchor" href="#example-2" aria-hidden="true">#</a> Example</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token keyword">interface</span> <span class="token class-name">PageInfo</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Page</span> <span class="token operator">=</span> <span class="token string">&#39;home&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;about&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;contact&#39;</span>\n\n<span class="token keyword">const</span> nav<span class="token operator">:</span> Record<span class="token operator">&lt;</span>Page<span class="token punctuation">,</span> PageInfo<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  about<span class="token operator">:</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">&#39;about&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  contact<span class="token operator">:</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">&#39;contact&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  home<span class="token operator">:</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">&#39;home&#39;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="pick-type-keys" tabindex="-1"><a class="header-anchor" href="#pick-type-keys" aria-hidden="true">#</a> <code>Pick&lt;Type, Keys&gt;</code></h2><h3 id="define-3" tabindex="-1"><a class="header-anchor" href="#define-3" aria-hidden="true">#</a> Define</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token comment">/**\n * 从 T 类型中挑选符合 K 类型的\n */</span>\n<span class="token keyword">type</span> <span class="token class-name">Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="example-3" tabindex="-1"><a class="header-anchor" href="#example-3" aria-hidden="true">#</a> Example</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token builtin">string</span>\n  description<span class="token operator">:</span> <span class="token builtin">string</span>\n  completed<span class="token operator">:</span> <span class="token builtin">boolean</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">TodoPreview</span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>Todo<span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;completed&#39;</span><span class="token operator">&gt;</span>\n\n<span class="token keyword">const</span> todo<span class="token operator">:</span> TodoPreview <span class="token operator">=</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token string">&#39;Clean room&#39;</span><span class="token punctuation">,</span>\n  completed<span class="token operator">:</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="exclude-type-excludedunion" tabindex="-1"><a class="header-anchor" href="#exclude-type-excludedunion" aria-hidden="true">#</a> <code>Exclude&lt;Type, ExcludedUnion&gt;</code></h2><h3 id="define-4" tabindex="-1"><a class="header-anchor" href="#define-4" aria-hidden="true">#</a> Define</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token comment">/**\n * 从 U 中移除可以赋值给 K 的类型\n */</span>\n<span class="token keyword">type</span> <span class="token class-name">Exclude<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">K</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">U</span>\n</code></pre></div><h3 id="example-4" tabindex="-1"><a class="header-anchor" href="#example-4" aria-hidden="true">#</a> Example</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T0</span></span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token operator">&gt;</span>\n<span class="token comment">// type T0 = &quot;b&quot; | &quot;c&quot;</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T1</span></span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span><span class="token operator">&gt;</span>\n<span class="token comment">// type T1 = &quot;c&quot;</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T2</span></span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">Function</span><span class="token operator">&gt;</span>\n<span class="token comment">// type T2 = string | number</span>\n</code></pre></div><h2 id="omit-type-keys" tabindex="-1"><a class="header-anchor" href="#omit-type-keys" aria-hidden="true">#</a> <code>Omit&lt;Type, Keys&gt;</code></h2><h3 id="define-5" tabindex="-1"><a class="header-anchor" href="#define-5" aria-hidden="true">#</a> Define</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token comment">/**\n * 从 T 中移除 K 属性\n */</span>\n<span class="token keyword">type</span> <span class="token class-name">Omit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> Exclude<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="example-5" tabindex="-1"><a class="header-anchor" href="#example-5" aria-hidden="true">#</a> Example</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token builtin">string</span>\n  description<span class="token operator">:</span> <span class="token builtin">string</span>\n  completed<span class="token operator">:</span> <span class="token builtin">boolean</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">TodoPreview</span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>Todo<span class="token punctuation">,</span> <span class="token string">&#39;description&#39;</span><span class="token operator">&gt;</span>\n\n<span class="token keyword">const</span> todo<span class="token operator">:</span> TodoPreview <span class="token operator">=</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token string">&#39;Clean room&#39;</span><span class="token punctuation">,</span>\n  completed<span class="token operator">:</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="extract-type-union" tabindex="-1"><a class="header-anchor" href="#extract-type-union" aria-hidden="true">#</a> <code>Extract&lt;Type, Union&gt;</code></h2><h3 id="define-6" tabindex="-1"><a class="header-anchor" href="#define-6" aria-hidden="true">#</a> Define</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token comment">/**\n * 从 T、U 类型中获取交集\n */</span>\n<span class="token keyword">type</span> <span class="token class-name">Extract<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token builtin">never</span>\n</code></pre></div><h3 id="example-6" tabindex="-1"><a class="header-anchor" href="#example-6" aria-hidden="true">#</a> Example</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T0</span></span> <span class="token operator">=</span> Extract<span class="token operator">&lt;</span><span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;f&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token comment">// type T0 = &quot;a&quot;</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T1</span></span> <span class="token operator">=</span> Extract<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">Function</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token comment">// type T1 = () =&gt; void</span>\n</code></pre></div><h2 id="nonnullable-type" tabindex="-1"><a class="header-anchor" href="#nonnullable-type" aria-hidden="true">#</a> <code>NonNullable&lt;Type&gt;</code></h2><h3 id="define-7" tabindex="-1"><a class="header-anchor" href="#define-7" aria-hidden="true">#</a> Define</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token comment">/**\n * 从 U 类型中移除 null 和 undefined\n */</span>\n<span class="token keyword">type</span> <span class="token class-name">NonNullable<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">null</span></span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">U</span>\n</code></pre></div><h3 id="example-7" tabindex="-1"><a class="header-anchor" href="#example-7" aria-hidden="true">#</a> Example</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T0</span></span> <span class="token operator">=</span> NonNullable<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token comment">// type T0 = string | number</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T1</span></span> <span class="token operator">=</span> NonNullable<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token comment">// type T1 = string[]</span>\n</code></pre></div><h2 id="parameters-type" tabindex="-1"><a class="header-anchor" href="#parameters-type" aria-hidden="true">#</a> <code>Parameters&lt;Type&gt;</code></h2><h3 id="define-8" tabindex="-1"><a class="header-anchor" href="#define-8" aria-hidden="true">#</a> Define</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token comment">/**\n * 从 T 类型中获取参数类型\n */</span>\n<span class="token keyword">type</span> <span class="token class-name">Parameters<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> infer <span class="token constant">P</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">never</span>\n</code></pre></div><h3 id="example-8" tabindex="-1"><a class="header-anchor" href="#example-8" aria-hidden="true">#</a> Example</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token parameter">arg<span class="token operator">:</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> number<span class="token punctuation">;</span> b<span class="token operator">:</span> string <span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T0</span></span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token comment">// type T0 = []</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T1</span></span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token parameter">s<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token comment">// type T1 = [s: string]</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T2</span></span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">T</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">(arg: T) =&gt; T&gt;;\n// type T2 = [arg: unknown]\ntype T3 = Parameters&lt;typeof f1&gt;;\n// type T3 = [arg: {\n//   a: number;\n//   b: string;\n// }]\ntype T4 = Parameters&lt;any&gt;;\n// type T4 = unknown[]\ntype T5 = Parameters&lt;never&gt;;\n// type T5 = never\ntype T6 = Parameters&lt;string&gt;; // ERROR\n// Type &#39;string&#39; does not satisfy the constraint &#39;(...args: any) =&gt; any&#39;.\n// type T6 = never\ntype T7 = Parameters&lt;Function&gt;; // ERROR\n// Type &#39;Function&#39; does not satisfy the constraint &#39;(...args: any) =&gt; any&#39;.\n// Type &#39;Function&#39; provides no match for the signature &#39;(...args: any): any&#39;.\n// type T7 = never\n</span></code></pre></div><h2 id="constructorparameters-type" tabindex="-1"><a class="header-anchor" href="#constructorparameters-type" aria-hidden="true">#</a> <code>ConstructorParameters&lt;Type&gt;</code></h2><h3 id="define-9" tabindex="-1"><a class="header-anchor" href="#define-9" aria-hidden="true">#</a> Define</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token comment">/**\n * 从 T 类型中获取构造函数的参数类型\n */</span>\n<span class="token keyword">type</span> <span class="token class-name">ConstructorParameters<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">new</span></span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> infer <span class="token constant">P</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">never</span>\n</code></pre></div><h3 id="example-9" tabindex="-1"><a class="header-anchor" href="#example-9" aria-hidden="true">#</a> Example</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T0</span></span> <span class="token operator">=</span> ConstructorParameters<span class="token operator">&lt;</span>ErrorConstructor<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token comment">// type T0 = [message?: string]</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T1</span></span> <span class="token operator">=</span> ConstructorParameters<span class="token operator">&lt;</span>FunctionConstructor<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token comment">// type T1 = string[]</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T2</span></span> <span class="token operator">=</span> ConstructorParameters<span class="token operator">&lt;</span>RegExpConstructor<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token comment">// type T2 = [pattern: string | RegExp, flags?: string]</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T3</span></span> <span class="token operator">=</span> ConstructorParameters<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token comment">// type T3 = unknown[]</span>\n\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T4</span></span> <span class="token operator">=</span> ConstructorParameters<span class="token operator">&lt;</span><span class="token builtin">Function</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// ERROR</span>\n<span class="token comment">// Type &#39;Function&#39; does not satisfy the constraint &#39;new (...args: any) =&gt; any&#39;.</span>\n<span class="token comment">// Type &#39;Function&#39; provides no match for the signature &#39;new (...args: any): any&#39;.</span>\n<span class="token comment">// type T4 = never</span>\n</code></pre></div><h2 id="returntype-type" tabindex="-1"><a class="header-anchor" href="#returntype-type" aria-hidden="true">#</a> <code>ReturnType&lt;Type&gt;</code></h2><h3 id="define-10" tabindex="-1"><a class="header-anchor" href="#define-10" aria-hidden="true">#</a> Define</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token comment">/**\n * 从 T 类型中获取返回类型\n */</span>\n<span class="token keyword">type</span> <span class="token class-name">ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">never</span>\n</code></pre></div><h3 id="example-10" tabindex="-1"><a class="header-anchor" href="#example-10" aria-hidden="true">#</a> Example</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> b<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T0</span></span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token comment">// type T0 = string</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T1</span></span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token parameter">s<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token comment">// type T1 = void</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T2</span></span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">T</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">() =&gt; T&gt;;\n// type T2 = unknown\ntype T3 = ReturnType&lt;&lt;T extends U, U extends number[]&gt;() =&gt; T&gt;;\n// type T3 = number[]\ntype T4 = ReturnType&lt;typeof f1&gt;;\n// type T4 = {\n// a: number;\n// b: string;\n// }\ntype T5 = ReturnType&lt;any&gt;;\n// type T5 = any\ntype T6 = ReturnType&lt;never&gt;;\n// type T6 = never\ntype T7 = ReturnType&lt;string&gt;;\n// Type &#39;string&#39; does not satisfy the constraint &#39;(...args: any) =&gt; any&#39;.\n// type T7 = any\ntype T8 = ReturnType&lt;Function&gt;;\n// Type &#39;Function&#39; does not satisfy the constraint &#39;(...args: any) =&gt; any&#39;.\n// Type &#39;Function&#39; provides no match for the signature &#39;(...args: any): any&#39;.\n// type T8 = any\n</span></code></pre></div><h2 id="instancetype-type" tabindex="-1"><a class="header-anchor" href="#instancetype-type" aria-hidden="true">#</a> <code>InstanceType&lt;Type&gt;</code></h2><h3 id="define-11" tabindex="-1"><a class="header-anchor" href="#define-11" aria-hidden="true">#</a> Define</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token comment">/**\n * 从 T 类型中获取实例类型\n */</span>\n<span class="token keyword">type</span> <span class="token class-name">InstanceType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">new</span></span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">never</span>\n</code></pre></div><h3 id="example-11" tabindex="-1"><a class="header-anchor" href="#example-11" aria-hidden="true">#</a> Example</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token punctuation">{</span>\n  x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T0</span></span> <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> <span class="token constant">C</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token comment">// type T0 = C</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T1</span></span> <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token comment">// type T1 = any</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T2</span></span> <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token builtin">never</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token comment">// type T2 = never</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T3</span></span> <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token comment">// Type &#39;string&#39; does not satisfy the constraint &#39;new (...args: any) =&gt; any&#39;.</span>\n<span class="token comment">// type T3 = any</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T4</span></span> <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token builtin">Function</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token comment">// Type &#39;Function&#39; does not satisfy the constraint &#39;new (...args: any) =&gt; any&#39;.</span>\n<span class="token comment">// Type &#39;Function&#39; provides no match for the signature &#39;new (...args: any): any&#39;.</span>\n<span class="token comment">// type T4 = any</span>\n</code></pre></div><h2 id="required-type" tabindex="-1"><a class="header-anchor" href="#required-type" aria-hidden="true">#</a> <code>Required&lt;Type&gt;</code></h2><h3 id="define-12" tabindex="-1"><a class="header-anchor" href="#define-12" aria-hidden="true">#</a> Define</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token comment">/**\n * 将 T 中的所有的属性都变为必选\n */</span>\n<span class="token keyword">type</span> <span class="token class-name">Required<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="example-12" tabindex="-1"><a class="header-anchor" href="#example-12" aria-hidden="true">#</a> Example</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>\n  a<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  b<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> obj<span class="token operator">:</span> Props <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> obj2<span class="token operator">:</span> Required<span class="token operator">&lt;</span>Props<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span>\n<span class="token comment">// Property &#39;b&#39; is missing in type &#39;{ a: number; }&#39; but required in type &#39;Required&lt;Props&gt;&#39;.</span>\n</code></pre></div><h2 id="thisparametertype-type" tabindex="-1"><a class="header-anchor" href="#thisparametertype-type" aria-hidden="true">#</a> <code>ThisParameterType&lt;Type&gt;</code></h2><h3 id="define-13" tabindex="-1"><a class="header-anchor" href="#define-13" aria-hidden="true">#</a> Define</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token comment">/**\n * 从 T 类型获取 this\n */</span>\n<span class="token keyword">type</span> <span class="token class-name">ThisParameterType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">this</span><span class="token operator">:</span> infer <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token operator">:</span> <span class="token builtin">unknown</span>\n</code></pre></div><h3 id="example-13" tabindex="-1"><a class="header-anchor" href="#example-13" aria-hidden="true">#</a> Example</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">toHex</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">this</span><span class="token operator">:</span> Number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">numberToString</span> <span class="token punctuation">(</span><span class="token parameter">n<span class="token operator">:</span> ThisParameterType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> toHex<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">toHex</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="omitthisparameter-type" tabindex="-1"><a class="header-anchor" href="#omitthisparameter-type" aria-hidden="true">#</a> <code>OmitThisParameter&lt;Type&gt;</code></h2><h3 id="define-14" tabindex="-1"><a class="header-anchor" href="#define-14" aria-hidden="true">#</a> Define</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token comment">/**\n * 从 T 类型中移除 this\n */</span>\n<span class="token keyword">type</span> <span class="token class-name">OmitThisParameter<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token builtin">unknown</span> <span class="token keyword">extends</span> <span class="token class-name">ThisParameterType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> infer <span class="token constant">A</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token constant">A</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token constant">T</span>\n</code></pre></div><h3 id="example-14" tabindex="-1"><a class="header-anchor" href="#example-14" aria-hidden="true">#</a> Example</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">toHex</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">this</span><span class="token operator">:</span> Number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> fiveToHex<span class="token operator">:</span> OmitThisParameter<span class="token operator">&lt;</span><span class="token keyword">typeof</span> toHex<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">toHex</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fiveToHex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="thistype-type" tabindex="-1"><a class="header-anchor" href="#thistype-type" aria-hidden="true">#</a> <code>ThisType&lt;Type&gt;</code></h2><h3 id="define-15" tabindex="-1"><a class="header-anchor" href="#define-15" aria-hidden="true">#</a> Define</h3><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token comment">/**\n * 将 T 注入为 this\n */</span>\n<span class="token keyword">interface</span> <span class="token class-name">ThisType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n</code></pre></div><h3 id="example-15" tabindex="-1"><a class="header-anchor" href="#example-15" aria-hidden="true">#</a> Example</h3><p>直接看定义一脸懵逼，而在示例中则很明显了，是否想起了被增强的 Vue Options 写法呢？</p><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token keyword">type</span> <span class="token class-name">ObjectDescriptor<span class="token operator">&lt;</span><span class="token constant">D</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  data<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">D</span><span class="token punctuation">;</span>\n  methods<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">M</span> <span class="token operator">&amp;</span> ThisType<span class="token operator">&lt;</span><span class="token constant">D</span> <span class="token operator">&amp;</span> <span class="token constant">M</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// Type of &#39;this&#39; in methods is D &amp; M</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">makeObject</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">D</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>desc<span class="token operator">:</span> ObjectDescriptor<span class="token operator">&lt;</span><span class="token constant">D</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">D</span> <span class="token operator">&amp;</span> <span class="token constant">M</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> data<span class="token operator">:</span> object <span class="token operator">=</span> desc<span class="token punctuation">.</span>data <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> methods<span class="token operator">:</span> object <span class="token operator">=</span> desc<span class="token punctuation">.</span>methods <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>data<span class="token punctuation">,</span> <span class="token operator">...</span>methods <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token constant">D</span> <span class="token operator">&amp;</span> <span class="token constant">M</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token function">makeObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  data<span class="token operator">:</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">moveBy</span><span class="token punctuation">(</span><span class="token parameter">dx<span class="token operator">:</span> number<span class="token punctuation">,</span> dy<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+=</span> dx<span class="token punctuation">;</span> <span class="token comment">// Strongly typed this</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+=</span> dy<span class="token punctuation">;</span> <span class="token comment">// Strongly typed this</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nobj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\nobj<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\nobj<span class="token punctuation">.</span><span class="token function">moveBy</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',86);c.render=function(e,o){const c=n("OutboundLink");return s(),a(p,null,[l,t("p",null,[t("a",r,[k,t(c)]),i,t("a",u,[d,t(c)]),y]),g,t("p",null,[m,h,x,f,t("a",b,[T,t(c)]),w]),v],64)};export default c;
